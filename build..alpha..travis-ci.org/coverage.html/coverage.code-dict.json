{"/home/travis/build/npmtest/node-npmtest-grunt-angular-templates/test.js":"/* istanbul instrument in package npmtest_grunt_angular_templates */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-angular-templates/lib.npmtest_grunt_angular_templates.js":"/* istanbul instrument in package npmtest_grunt_angular_templates */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_angular_templates = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_angular_templates = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-angular-templates/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-angular-templates && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_angular_templates */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_angular_templates\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_angular_templates.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_grunt_angular_templates.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_angular_templates.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_grunt_angular_templates.__dirname +\n                    '/lib.npmtest_grunt_angular_templates.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-angular-templates/grunt-angular-templates/Gruntfile.js":"/*\n * grunt-angular-templates\n * https://github.com/ericclemmons/grunt-angular-templates\n *\n * Copyright (c) 2013 Eric Clemmons\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function(grunt) {\n\n  grunt.initConfig({\n    clean: {\n      tests: 'tmp'\n    },\n    copy: {\n      tmp: {\n        files: [{\n          expand: true,\n          cwd: 'test/fixtures',\n          src: ['usemin.html', 'useminUgly.html', 'usemin/*', 'useminUgly/*'],\n          dest: 'tmp/'\n        }]\n      }\n    },\n    nodeunit: {\n      tests: ['test/*.js']\n    },\n    watch: {\n      tests: '<%= nodeunit.tests %>',\n      tasks: 'default'\n    },\n    jshint: {\n      all: ['Gruntfile.js', 'tasks/**/*.js', '<%= nodeunit.tests %>'],\n      options: {\n        jshintrc: '.jshintrc',\n      }\n    },\n    concat: {\n      custom_concat: {\n        src: 'test/fixtures/one.html',\n        dest: 'tmp/custom_concat_combined.js',\n        options: {\n          separator: '\\n\\n'\n        }\n      }\n    },\n    usemin: {\n      html: 'tmp/useminUgly.html'\n    },\n    useminWithoutUglify: {\n      html: 'tmp/usemin.html'\n    },\n    useminPrepare: {\n      html: 'test/fixtures/useminUgly.html',\n      options: {\n        dest: 'tmp',\n        staging: 'tmp',\n        flow: {\n          html: {\n            steps: {\n              js: ['concat', 'uglify'],\n              css: ['concat', 'cssmin']\n            }\n          }\n        }\n      }\n    },\n    useminPrepareWithoutUglify: {\n      html: 'test/fixtures/usemin.html',\n      options: {\n        dest: 'tmp',\n        staging: 'tmp',\n        flow: {\n          html: {\n            steps: {\n              js: ['concat'],\n              css: ['concat']\n            }\n          }\n        }\n      }\n    },\n    cssmin: {},\n\n    // All supported examples should be here\n    ngtemplates: {\n      // Change `angular` namespace to something else\n      custom_angular: {\n        src: ['test/fixtures/one.html', 'test/fixtures/two/**/*.html'],\n        dest: 'tmp/custom_angular.js',\n        options: {\n          angular: 'myAngular'\n        }\n      },\n\n      // Custom CommonJS bootstrapper\n      custom_bootstrap: {\n        src: ['test/fixtures/one.html', 'test/fixtures/two/**/*.html'],\n        dest: 'tmp/custom_bootstrap.js',\n        options: {\n          bootstrap: function(module, script) {\n            return 'module.exports = function($templateCache) {\\n' + script + '\\n};\\n';\n          }\n        }\n      },\n\n      // Append dest to existing concat target\n      custom_concat: {\n        src: ['test/fixtures/one.html', 'test/fixtures/two/**/*.html'],\n        dest: 'tmp/custom_concat.js',\n        options: {\n          concat: 'custom_concat'\n        }\n      },\n\n      custom_usemin: {\n        src: ['test/fixtures/one.html', 'test/fixtures/two/**/*.html'],\n        dest: 'tmp/custom_concat_usemin.js',\n        options: {\n          usemin: 'useminUgly/all.js'\n        }\n      },\n\n      custom_usemin_not_found: {\n        src: ['test/fixtures/one.html', 'test/fixtures/two/**/*.html'],\n        dest: 'tmp/custom_concat_usemin_not_found.js',\n        options: {\n          usemin: 'useminUgly/not_found.js'\n        }\n      },\n\n      html5: {\n        src: ['test/fixtures/html5.html'],\n        dest: 'tmp/html5.js'\n      },\n\n      // Minify the HTML\n      custom_htmlmin: {\n        src: ['test/fixtures/one.html', 'test/fixtures/two/**/*.html'],\n        dest: 'tmp/custom_htmlmin.js',\n        options: {\n          htmlmin: {\n            collapseBooleanAttributes:      true,\n            collapseWhitespace:             true,\n            removeAttributeQuotes:          true,\n            removeComments:                 true,\n            removeEmptyAttributes:          true,\n            removeRedundantAttributes:      true,\n            removeScriptTypeAttributes:     true,\n            removeStyleLinkTypeAttributes:  true\n          }\n        }\n      },\n\n      missing_htmlmin: {\n        src: ['test/fixtures/one.html', 'test/fixtures/two/**/*.html'],\n        dest: 'tmp/missing_htmlmin.js',\n        options: {\n          htmlmin: null\n        }\n      },\n\n      // Minify the HTML, but using another tasks' settings\n      task_htmlmin: {\n        src: ['test/fixtures/one.html', 'test/fixtures/two/**/*.html'],\n        dest: 'tmp/task_htmlmin.js',\n        options: {\n          htmlmin: '<%= ngtemplates.custom_htmlmin.options.htmlmin %>'\n        }\n      },\n\n      // Default `module` option to the sub-task name (`default_module`)\n      default_module: {\n        src: ['test/fixtures/one.html', 'test/fixtures/two/**/*.html'],\n        dest: 'tmp/default_module.js'\n      },\n\n      // Customize angular module\n      custom_module: {\n        src: ['test/fixtures/one.html', 'test/fixtures/two/**/*.html'],\n        dest: 'tmp/custom_module.js',\n        options: {\n          module: 'customModule'\n        }\n      },\n\n      // Customize angular module\n      callback_module: {\n        src: ['test/fixtures/one.html', 'test/fixtures/two/**/*.html'],\n        dest: 'tmp/callback_module.js',\n        options: {\n          module: function(url, options) {\n            return url.split('/').join('.');\n          },\n          url: function(file) {\n            return file.replace('.html', '');\n          }\n        }\n      },\n\n      // Customize template URL prefix\n      custom_prefix: {\n        src: ['test/fixtures/one.html', 'test/fixtures/two/**/*.html'],\n        dest: 'tmp/custom_prefix.js',\n        options: {\n          prefix: '/static'\n        }\n      },\n\n      // Customize template source\n      custom_source: {\n        src: ['test/fixtures/one.html', 'test/fixtures/two/**/*.html'],\n        dest: 'tmp/custom_source.js',\n        options: {\n          source: function(source, url) {\n            return \"<!-- Template: \" + url + \" -->\\n\" + source;\n          }\n        }\n      },\n\n      // Module should be new & have [] defined\n      standalone: {\n        src: ['test/fixtures/one.html', 'test/fixtures/two/**/*.html'],\n        dest: 'tmp/standalone.js',\n        options: {\n          standalone: true\n        }\n      },\n\n      // URLs should match path exactly\n      full_url: {\n        src: ['test/fixtures/one.html', 'test/fixtures/two/**/*.html'],\n        dest: 'tmp/full_url.js'\n      },\n\n      // URLs should match path, sans the `cwd`\n      relative_url: {\n        cwd: 'test/fixtures',\n        src: ['one.html', 'two/**/*.html'],\n        dest: 'tmp/relative_url.js'\n      },\n\n      // URLs should match path, sans the `cwd`\n      relative_url_expand: {\n        expand: true,\n        cwd: 'test/fixtures',\n        src: ['three/**/*.html'],\n        dest: 'tmp',\n        ext: '.js'\n      },\n\n      // Customize URLs to not have an extension\n      custom_url:  {\n        src: ['test/fixtures/one.html', 'test/fixtures/two/**/*.html'],\n        dest: 'tmp/custom_url.js',\n        options: {\n          url: function(url) {\n            return url.replace('.html', '');\n          }\n        }\n      },\n\n      // Empty file\n      empty_file: {\n        src: 'test/fixtures/empty.html',\n        dest: 'tmp/empty_file.js'\n      },\n\n      // undefined file\n      undefined_file: {\n        src: 'test/fixtures/undefined.html',\n        dest: 'tmp/undefined_file.js'\n      },\n\n      single_quotes: {\n        src: 'test/fixtures/one.html',\n        dest: 'tmp/single_quotes.js',\n        options: {\n          quotes: 'single'\n        }\n      },\n\n      linebreak: {\n        src: 'test/fixtures/linebreak.html',\n        dest: 'tmp/linebreak.js',\n      },\n\n      regexp: {\n        src: 'test/fixtures/regexp.html',\n        dest: 'tmp/regexp.js'\n      },\n\n      usemin_no_uglify: {\n        src: ['test/fixtures/one.html', 'test/fixtures/two/**/*.html'],\n        dest: 'tmp/custom_concat_usemin_no_uglify.js',\n        options: {\n          usemin: 'usemin/all.js'\n        }\n      },\n\n      // bunch of files at different level in a directory (unmerged in dest)\n      unmerged_files: {\n        src: 'test/fixtures/unmerged/**/*.html',\n        dest: 'tmp/unmerged/',\n        options: {\n          merge: false\n        }\n      }\n    }\n  });\n\n  grunt.registerTask('useminPrepareWithoutUglify', function () {\n    grunt.config.set('concat.generated', null);\n    grunt.config.set('uglify.generated', null);\n    var useminPrepareWithoutUglify = grunt.config('useminPrepareWithoutUglify');\n    grunt.config.set('useminPrepare', useminPrepareWithoutUglify);\n    grunt.task.run('useminPrepare');\n  });\n\n  grunt.registerTask('useminWithoutUglify', function () {\n    var useminWithoutUglify = grunt.config('useminWithoutUglify');\n    grunt.config.set('usemin', useminWithoutUglify);\n    grunt.task.run('usemin');\n  });\n\n  var prettyTemplates = [\n    'usemin_no_uglify'\n  ];\n\n  grunt.registerTask('uglyTemplates', function(){\n    var templateKeys = Object.keys(grunt.config('ngtemplates'));\n    var tasks = [];\n\n    for(var i in templateKeys){\n      if(prettyTemplates.indexOf(templateKeys[i]) === -1){\n        tasks.push('ngtemplates:' + templateKeys[i]);\n      }\n    }\n\n    grunt.task.run(tasks);\n  });\n\n  grunt.registerTask('prettyTemplates', function(){\n    var templateKeys = Object.keys(grunt.config('ngtemplates'));\n    var tasks = [];\n\n    for(var i in templateKeys){\n      if(prettyTemplates.indexOf(templateKeys[i]) !== -1){\n        tasks.push('ngtemplates:' + templateKeys[i]);\n      }\n    }\n\n    grunt.task.run(tasks);\n  });\n\n  // Load local tasks.\n  grunt.loadTasks('tasks');\n  grunt.loadNpmTasks('grunt-contrib-clean');\n  grunt.loadNpmTasks('grunt-contrib-concat');\n  grunt.loadNpmTasks('grunt-contrib-copy');\n  grunt.loadNpmTasks('grunt-contrib-cssmin');\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-nodeunit');\n  grunt.loadNpmTasks('grunt-contrib-uglify');\n  grunt.loadNpmTasks('grunt-usemin');\n\n  grunt.registerTask('default', [\n    'jshint',\n    'clean',\n    'copy',\n    'useminPrepare',\n    'uglyTemplates',\n    'concat',\n    'uglify',\n    'cssmin',\n    'usemin',\n    'useminPrepareWithoutUglify',\n    'prettyTemplates',\n    'concat',\n    'useminWithoutUglify',\n    'nodeunit'\n  ]);\n};\n"}